{
  "version": 3,
  "sources": ["src/app/features/admin/order-management/order-management.component.ts", "src/app/features/admin/order-management/order-management.component.html"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterLink } from '@angular/router';\r\nimport { Order, OrderStatus, PaymentStatus } from '../../../core/models/order.model';\r\nimport { OrderItem } from '../../../core/models/order-item.model';\r\nimport { OrderService } from '../../../core/services/order.service';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { Restaurant } from '../../../core/models/restaurant.model';\r\n\r\ninterface OrderWithItems extends Omit<Order, 'restaurant'> {\r\n  userItems?: {[userId: string]: {\r\n    userName: string;\r\n    items: OrderItem[];\r\n    totalAmount: number;\r\n    deliveryFee: number;\r\n    isPaid: boolean;\r\n  }};\r\n  totalAmount?: number;\r\n  deliveryFee?: number;\r\n  restaurant?: Restaurant;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-order-management',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, RouterLink],\r\n  templateUrl: './order-management.component.html',\r\n  styleUrls: ['./order-management.component.scss']\r\n})\r\nexport class OrderManagementComponent implements OnInit {\r\n  activeOrders: OrderWithItems[] = [];\r\n  orderHistory: OrderWithItems[] = [];\r\n  isLoading = false;\r\n  errorMessage = '';\r\n  successMessage = '';\r\n  \r\n  // Selected order details\r\n  selectedOrder: OrderWithItems | null = null;\r\n  isLoadingDetails = false;\r\n  \r\n  // Order closure confirmation\r\n  orderToClose: Order | null = null;\r\n  isProcessingClose = false;\r\n  \r\n  // Payment status update\r\n  processingPayment = false;\r\n  \r\n  // Enum references for the template\r\n  OrderStatus = OrderStatus;\r\n  PaymentStatus = PaymentStatus;\r\n  \r\n  // For template use\r\n  Object = Object;\r\n  \r\n  constructor(\r\n    private orderService: OrderService,\r\n    public authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n  \r\n  ngOnInit(): void {\r\n    // Only allow access to admin users\r\n    if (!this.authService.isLoggedIn || !this.authService.isAdmin) {\r\n      this.router.navigate(['/']);\r\n      return;\r\n    }\r\n    \r\n    this.loadActiveOrders();\r\n    this.loadOrderHistory();\r\n  }\r\n  \r\n  loadActiveOrders(): void {\r\n    this.isLoading = true;\r\n    this.errorMessage = '';\r\n    \r\n    this.orderService.getActiveOrders().subscribe({\r\n      next: (orders: any) => {\r\n        // Process the new response format\r\n        this.activeOrders = orders.map((order: any) => {\r\n          // Convert to our OrderWithItems format\r\n          return {\r\n            ...order,\r\n            id: order.id,\r\n            restaurant: {\r\n              id: '',\r\n              name: order.restaurantName || 'N/A',\r\n              description: '',\r\n              address: '',\r\n              phoneNumber: '',\r\n              deliveryFee: order.deliveryFee || 0\r\n            },\r\n            restaurantId: '',\r\n            managerId: '',\r\n            status: order.status,\r\n            orderDate: order.orderDate,\r\n            closedAt: order.closedAt,\r\n            deliveryFee: order.deliveryFee\r\n          } as OrderWithItems;\r\n        });\r\n        \r\n        console.log('Processed active orders:', this.activeOrders);\r\n        this.isLoading = false;\r\n      },\r\n      error: (error: any) => {\r\n        this.isLoading = false;\r\n        this.errorMessage = error.message || 'Failed to load active orders';\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadOrderHistory(): void {\r\n    this.isLoading = true;\r\n    this.errorMessage = '';\r\n    \r\n    this.orderService.getOrderHistory().subscribe({\r\n      next: (orders: any) => {\r\n        // Process the new response format\r\n        this.orderHistory = orders.map((order: any) => {\r\n          // Convert to our OrderWithItems format\r\n          return {\r\n            ...order,\r\n            id: order.id,\r\n            restaurant: {\r\n              id: '',\r\n              name: order.restaurantName || 'N/A',\r\n              description: '',\r\n              address: '',\r\n              phoneNumber: '',\r\n              deliveryFee: order.deliveryFee || 0\r\n            },\r\n            restaurantId: '',\r\n            managerId: '',\r\n            status: order.status,\r\n            orderDate: order.orderDate,\r\n            closedAt: order.closedAt,\r\n            deliveryFee: order.deliveryFee\r\n          } as OrderWithItems;\r\n        });\r\n        \r\n        console.log('Processed order history:', this.orderHistory);\r\n        this.isLoading = false;\r\n      },\r\n      error: (error: any) => {\r\n        this.isLoading = false;\r\n        this.errorMessage = error.message || 'Failed to load order history';\r\n      }\r\n    });\r\n  }\r\n  \r\n  showCloseOrderConfirmation(order: any): void {\r\n    // If this is the new format with restaurantName, convert it to Order format\r\n    if (order.restaurantName !== undefined) {\r\n      this.orderToClose = {\r\n        id: order.id,\r\n        restaurantId: '',\r\n        managerId: '',\r\n        status: order.status,\r\n        orderDate: order.orderDate,\r\n        closedAt: order.closedAt,\r\n        restaurant: {\r\n          id: '',\r\n          name: order.restaurantName,\r\n          description: '',\r\n          address: '',\r\n          phoneNumber: '',\r\n          deliveryFee: order.deliveryFee || 0\r\n        }\r\n      };\r\n    } else {\r\n      this.orderToClose = order;\r\n    }\r\n  }\r\n  \r\n  cancelCloseOrder(): void {\r\n    this.orderToClose = null;\r\n  }\r\n  \r\n  confirmCloseOrder(): void {\r\n    if (!this.orderToClose) return;\r\n    \r\n    this.isProcessingClose = true;\r\n    this.errorMessage = '';\r\n    \r\n    const orderToCloseId = this.orderToClose.id;\r\n    this.orderService.closeOrder(this.orderToClose.id!).subscribe({\r\n      next: () => {\r\n        this.successMessage = 'Order closed successfully';\r\n        this.isProcessingClose = false;\r\n        \r\n        // Store the ID before clearing the orderToClose\r\n        const closedOrderId = this.orderToClose?.id;\r\n        this.orderToClose = null;\r\n        \r\n        // Refresh the order lists\r\n        this.loadActiveOrders();\r\n        this.loadOrderHistory();\r\n        \r\n        // If this was the selected order, refresh its details\r\n        if (this.selectedOrder && this.selectedOrder.id === closedOrderId) {\r\n          this.viewOrderDetails(this.selectedOrder as unknown as Order);\r\n        }\r\n      },\r\n      error: (error: any) => {\r\n        this.isProcessingClose = false;\r\n        this.errorMessage = error.message || 'Failed to close order';\r\n      }\r\n    });\r\n  }\r\n  \r\n  viewOrderDetails(order: any): void {\r\n    this.isLoadingDetails = true;\r\n    this.errorMessage = '';\r\n    \r\n    // Handle the new format with restaurantName directly\r\n    if (order.restaurantName !== undefined) {\r\n      this.selectedOrder = {\r\n        ...order,\r\n        id: order.id,\r\n        restaurantId: '',\r\n        managerId: '',\r\n        status: order.status,\r\n        orderDate: order.orderDate,\r\n        closedAt: order.closedAt,\r\n        restaurant: {\r\n          id: '',\r\n          name: order.restaurantName,\r\n          description: '',\r\n          address: '',\r\n          phoneNumber: '',\r\n          deliveryFee: order.deliveryFee || 0\r\n        },\r\n        deliveryFee: order.deliveryFee\r\n      } as OrderWithItems;\r\n      \r\n      // If the order already has userItems array, process it directly\r\n      if (order.userItems && Array.isArray(order.userItems) && order.userItems.length > 0) {\r\n        console.log('Processing embedded userItems from order', order.userItems);\r\n        \r\n        // Group items by user\r\n        const userItems: {[userId: string]: {\r\n          userName: string;\r\n          items: OrderItem[];\r\n          totalAmount: number;\r\n          deliveryFee: number;\r\n          isPaid: boolean;\r\n        }} = {};\r\n        \r\n        let totalAmount = 0;\r\n        const deliveryFee = order.deliveryFee || 0;\r\n        \r\n        // Process items from the embedded userItems\r\n        order.userItems.forEach((item: any) => {\r\n          const userId = item.userId;\r\n          const userName = item.userName || 'Unknown User';\r\n          const itemPrice = item.price || 0;\r\n          const itemTotal = item.total || (itemPrice * item.quantity);\r\n          \r\n          totalAmount += itemTotal;\r\n          \r\n          if (!userItems[userId]) {\r\n            userItems[userId] = {\r\n              userName,\r\n              items: [],\r\n              totalAmount: 0,\r\n              deliveryFee: 0, // Will calculate after counting users\r\n              isPaid: false // We'll update this later if needed\r\n            };\r\n          }\r\n          \r\n          // Convert to our OrderItem format\r\n          const orderItem: OrderItem = {\r\n            id: item.id,\r\n            orderId: order.id,\r\n            userId: item.userId,\r\n            menuItemId: item.menuItemId || '',\r\n            quantity: item.quantity,\r\n            note: item.note,\r\n            menuItem: {\r\n              id: item.menuItemId || '',\r\n              name: item.menuItemName,\r\n              description: '',\r\n              price: item.price,\r\n              restaurantId: ''\r\n            },\r\n            user: {\r\n              id: item.userId,\r\n              name: item.userName,\r\n              email: ''\r\n            }\r\n          };\r\n          \r\n          userItems[userId].items.push(orderItem);\r\n          userItems[userId].totalAmount += itemTotal;\r\n        });\r\n        \r\n        // Calculate delivery fee per user - divide equally\r\n        const userCount = Object.keys(userItems).length;\r\n        if (userCount > 0 && deliveryFee > 0) {\r\n          const deliveryFeePerUser = order.deliveryFeeShare || (deliveryFee / userCount);\r\n          \r\n          // Assign delivery fee to each user\r\n          Object.keys(userItems).forEach(userId => {\r\n            userItems[userId].deliveryFee = deliveryFeePerUser;\r\n            // Add delivery fee to user total\r\n            userItems[userId].totalAmount += deliveryFeePerUser;\r\n          });\r\n          \r\n          // Add delivery fee to total amount\r\n          totalAmount += deliveryFee;\r\n        }\r\n        \r\n        this.selectedOrder.userItems = userItems;\r\n        this.selectedOrder.totalAmount = totalAmount;\r\n        this.selectedOrder.deliveryFee = deliveryFee;\r\n        this.isLoadingDetails = false;\r\n        return;\r\n      }\r\n    } else {\r\n      this.selectedOrder = { ...order } as OrderWithItems;\r\n    }\r\n    \r\n    this.orderService.getAllOrderItems(order.id).subscribe({\r\n      next: (response: any) => {\r\n        // Check if response is in the new format\r\n        if (response.items && Array.isArray(response.items)) {\r\n          console.log('Received new API response format', response);\r\n          \r\n          // Update restaurant name if available in the response\r\n          if (response.restaurantName) {\r\n            if (!this.selectedOrder!.restaurant) {\r\n              this.selectedOrder!.restaurant = { \r\n                id: '', \r\n                name: response.restaurantName,\r\n                description: '',\r\n                address: '',\r\n                phoneNumber: '',\r\n                deliveryFee: response.deliveryFee || 0\r\n              };\r\n            } else {\r\n              this.selectedOrder!.restaurant.name = response.restaurantName;\r\n              this.selectedOrder!.restaurant.deliveryFee = response.deliveryFee || 0;\r\n            }\r\n          }\r\n          \r\n          // Group items by user\r\n          const userItems: {[userId: string]: {\r\n            userName: string;\r\n            items: OrderItem[];\r\n            totalAmount: number;\r\n            deliveryFee: number;\r\n            isPaid: boolean;\r\n          }} = {};\r\n          \r\n          let totalAmount = 0;\r\n          const deliveryFee = response.deliveryFee || 0;\r\n          \r\n          // Process items from the new format\r\n          response.items.forEach((item: any) => {\r\n            const userId = item.userId;\r\n            const userName = item.userName || 'Unknown User';\r\n            const itemPrice = item.price || 0;\r\n            const itemTotal = item.itemTotal || (itemPrice * item.quantity);\r\n            \r\n            totalAmount += itemTotal;\r\n            \r\n            if (!userItems[userId]) {\r\n              userItems[userId] = {\r\n                userName,\r\n                items: [],\r\n                totalAmount: 0,\r\n                deliveryFee: 0, // Will calculate after counting users\r\n                isPaid: false // We'll update this later if needed\r\n              };\r\n            }\r\n            \r\n            // Convert to our OrderItem format\r\n            const orderItem: OrderItem = {\r\n              id: item.id,\r\n              orderId: response.orderId || order.id,\r\n              userId: item.userId,\r\n              menuItemId: item.menuItemId,\r\n              quantity: item.quantity,\r\n              note: item.note,\r\n              menuItem: {\r\n                id: item.menuItemId,\r\n                name: item.menuItemName,\r\n                description: item.menuItemDescription,\r\n                price: item.price,\r\n                restaurantId: ''\r\n              },\r\n              user: {\r\n                id: item.userId,\r\n                name: item.userName,\r\n                email: ''\r\n              }\r\n            };\r\n            \r\n            userItems[userId].items.push(orderItem);\r\n            userItems[userId].totalAmount += itemTotal;\r\n          });\r\n          \r\n          // Calculate delivery fee per user - divide equally\r\n          const userCount = Object.keys(userItems).length;\r\n          if (userCount > 0 && deliveryFee > 0) {\r\n            const deliveryFeePerUser = deliveryFee / userCount;\r\n            \r\n            // Assign delivery fee to each user\r\n            Object.keys(userItems).forEach(userId => {\r\n              userItems[userId].deliveryFee = deliveryFeePerUser;\r\n              // Add delivery fee to user total\r\n              userItems[userId].totalAmount += deliveryFeePerUser;\r\n            });\r\n            \r\n            // Add delivery fee to total amount\r\n            totalAmount += deliveryFee;\r\n          }\r\n          \r\n          // Check payment status for each user in closed orders\r\n          if (order.status === OrderStatus.Closed && order.payments) {\r\n            order.payments.forEach((payment: any) => {\r\n              if (payment.userId && userItems[payment.userId]) {\r\n                userItems[payment.userId].isPaid = payment.status === PaymentStatus.Paid;\r\n              }\r\n            });\r\n          }\r\n          \r\n          this.selectedOrder!.userItems = userItems;\r\n          this.selectedOrder!.totalAmount = totalAmount;\r\n          this.selectedOrder!.deliveryFee = deliveryFee;\r\n        } else {\r\n          // Handle the old format (array of OrderItem)\r\n          const items = response as OrderItem[];\r\n          \r\n          // Group items by user\r\n          const userItems: {[userId: string]: {\r\n            userName: string;\r\n            items: OrderItem[];\r\n            totalAmount: number;\r\n            deliveryFee: number;\r\n            isPaid: boolean;\r\n          }} = {};\r\n          \r\n          let totalAmount = 0;\r\n          \r\n          items.forEach(item => {\r\n            const userId = item.userId;\r\n            const userName = item.user?.name || 'Unknown User';\r\n            const itemPrice = item.menuItem?.price || 0;\r\n            const itemTotal = itemPrice * item.quantity;\r\n            \r\n            totalAmount += itemTotal;\r\n            \r\n            if (!userItems[userId]) {\r\n              userItems[userId] = {\r\n                userName,\r\n                items: [],\r\n                totalAmount: 0,\r\n                deliveryFee: 0,\r\n                isPaid: false // We'll update this later if needed\r\n              };\r\n            }\r\n            \r\n            userItems[userId].items.push(item);\r\n            userItems[userId].totalAmount += itemTotal;\r\n          });\r\n          \r\n          // Check payment status for each user in closed orders\r\n          if (order.status === OrderStatus.Closed && order.payments) {\r\n            order.payments.forEach((payment: any) => {\r\n              if (payment.userId && userItems[payment.userId]) {\r\n                userItems[payment.userId].isPaid = payment.status === PaymentStatus.Paid;\r\n              }\r\n            });\r\n          }\r\n          \r\n          this.selectedOrder!.userItems = userItems;\r\n          this.selectedOrder!.totalAmount = totalAmount;\r\n        }\r\n        \r\n        this.isLoadingDetails = false;\r\n      },\r\n      error: (error: any) => {\r\n        this.isLoadingDetails = false;\r\n        this.errorMessage = error.message || 'Failed to load order details';\r\n      }\r\n    });\r\n  }\r\n  \r\n  updatePaymentStatus(orderId: string, userId: string, status: PaymentStatus): void {\r\n    this.processingPayment = true;\r\n    this.errorMessage = '';\r\n    \r\n    this.orderService.updatePaymentStatus(orderId, userId, status).subscribe({\r\n      next: () => {\r\n        this.successMessage = 'Payment status updated successfully';\r\n        this.processingPayment = false;\r\n        \r\n        // Update the local state\r\n        if (this.selectedOrder && this.selectedOrder.userItems && userId in this.selectedOrder.userItems) {\r\n          this.selectedOrder.userItems[userId].isPaid = status === PaymentStatus.Paid;\r\n        }\r\n      },\r\n      error: (error: any) => {\r\n        this.processingPayment = false;\r\n        this.errorMessage = error.message || 'Failed to update payment status';\r\n      }\r\n    });\r\n  }\r\n  \r\n  clearSelectedOrder(): void {\r\n    this.selectedOrder = null;\r\n  }\r\n  \r\n  getOrderStatusName(status: OrderStatus): string {\r\n    switch(status) {\r\n      case OrderStatus.Open: return 'Open';\r\n      case OrderStatus.Closed: return 'Closed';\r\n      default: return 'Unknown';\r\n    }\r\n  }\r\n  \r\n  getOrderStatusClass(status: OrderStatus): string {\r\n    switch(status) {\r\n      case OrderStatus.Open: return 'bg-success';\r\n      case OrderStatus.Closed: return 'bg-secondary';\r\n      default: return 'bg-secondary';\r\n    }\r\n  }\r\n  \r\n  formatDate(date: Date | string | undefined): string {\r\n    if (!date) return 'N/A';\r\n    return new Date(date).toLocaleString();\r\n  }\r\n} ", "<div class=\"container py-4\">\r\n  <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n    <h1>Order Management</h1>\r\n  </div>\r\n\r\n  <!-- Alert messages -->\r\n  <div *ngIf=\"errorMessage\" class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n    {{ errorMessage }}\r\n    <button type=\"button\" class=\"btn-close\" (click)=\"errorMessage = ''\"></button>\r\n  </div>\r\n  <div *ngIf=\"successMessage\" class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n    {{ successMessage }}\r\n    <button type=\"button\" class=\"btn-close\" (click)=\"successMessage = ''\"></button>\r\n  </div>\r\n\r\n  <!-- Loading indicator -->\r\n  <div *ngIf=\"isLoading\" class=\"d-flex justify-content-center my-5\">\r\n    <div class=\"spinner-border text-primary\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Confirmation Modal -->\r\n  <div *ngIf=\"orderToClose\" class=\"confirmation-modal-overlay\">\r\n    <div class=\"confirmation-modal\">\r\n      <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">Confirm Order Closure</h4>\r\n        <button type=\"button\" class=\"btn-close\" (click)=\"cancelCloseOrder()\"></button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"alert alert-warning\">\r\n          <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n          Are you sure you want to close this order?\r\n        </div>\r\n        <p>This will finalize the order and prevent any further modifications.</p>\r\n        <div class=\"order-info mt-3\">\r\n          <p><strong>Order ID:</strong> {{ orderToClose.id }}</p>\r\n          <p><strong>Restaurant:</strong> {{ orderToClose.restaurant?.name || 'N/A' }}</p>\r\n          <p><strong>Date:</strong> {{ formatDate(orderToClose.orderDate) }}</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancelCloseOrder()\">Cancel</button>\r\n        <button type=\"button\" class=\"btn btn-danger\" [disabled]=\"isProcessingClose\" (click)=\"confirmCloseOrder()\">\r\n          <span *ngIf=\"isProcessingClose\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n          Close Order\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Order Details Modal -->\r\n  <div *ngIf=\"selectedOrder\" class=\"order-details-overlay\">\r\n    <div class=\"order-details-modal\">\r\n      <div class=\"modal-header\">\r\n        <h2 class=\"modal-title\">\r\n          Order Details \r\n          <span class=\"badge ms-2\" [ngClass]=\"getOrderStatusClass(selectedOrder.status)\">\r\n            {{ getOrderStatusName(selectedOrder.status) }}\r\n          </span>\r\n        </h2>\r\n        <button type=\"button\" class=\"btn-close\" (click)=\"clearSelectedOrder()\"></button>\r\n      </div>\r\n      \r\n      <div class=\"modal-body\">\r\n        <!-- Loading indicator for details -->\r\n        <div *ngIf=\"isLoadingDetails\" class=\"d-flex justify-content-center my-4\">\r\n          <div class=\"spinner-border text-primary\" role=\"status\">\r\n            <span class=\"visually-hidden\">Loading details...</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div *ngIf=\"!isLoadingDetails\">\r\n          <div class=\"order-info mb-4\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <p><strong>Order ID:</strong> {{ selectedOrder.id }}</p>\r\n                <p><strong>Restaurant:</strong> {{ selectedOrder.restaurant?.name || 'N/A' }}</p>\r\n              </div>\r\n              <div class=\"col-md-6\">\r\n                <p><strong>Date:</strong> {{ formatDate(selectedOrder.orderDate) }}</p>\r\n                <p *ngIf=\"selectedOrder.status === OrderStatus.Closed\">\r\n                  <strong>Closed At:</strong> {{ formatDate(selectedOrder.closedAt) }}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Order Items Grouped By User -->\r\n          <h3 class=\"mb-3\">Order Items by User</h3>\r\n          \r\n          <div *ngIf=\"selectedOrder.userItems && Object.keys(selectedOrder.userItems).length > 0; else noItems\">\r\n            <div class=\"user-order-section mb-4\" *ngFor=\"let userId of Object.keys(selectedOrder.userItems)\">\r\n              <div class=\"card\">\r\n                <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n                  <h4 class=\"mb-0\">{{ selectedOrder.userItems[userId].userName }}</h4>\r\n                  <div>\r\n                    <span class=\"badge me-2\" [ngClass]=\"selectedOrder.userItems[userId].isPaid ? 'bg-success' : 'bg-danger'\">\r\n                      {{ selectedOrder.userItems[userId].isPaid ? 'Paid' : 'Unpaid' }}\r\n                    </span>\r\n                    <button *ngIf=\"selectedOrder.status === OrderStatus.Closed && !selectedOrder.userItems[userId].isPaid\"\r\n                            class=\"btn btn-sm btn-success\"\r\n                            [disabled]=\"processingPayment\"\r\n                            (click)=\"updatePaymentStatus(selectedOrder.id!, userId, PaymentStatus.Paid)\">\r\n                      <i class=\"fas fa-check me-1\"></i> Mark as Paid\r\n                    </button>\r\n                    <button *ngIf=\"selectedOrder.status === OrderStatus.Closed && selectedOrder.userItems[userId].isPaid\"\r\n                            class=\"btn btn-sm btn-warning\"\r\n                            [disabled]=\"processingPayment\"\r\n                            (click)=\"updatePaymentStatus(selectedOrder.id!, userId, PaymentStatus.Unpaid)\">\r\n                      <i class=\"fas fa-times me-1\"></i> Mark as Unpaid\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div class=\"card-body\">\r\n                  <div class=\"table-responsive\">\r\n                    <table class=\"table table-sm\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Item</th>\r\n                          <th>Price</th>\r\n                          <th>Quantity</th>\r\n                          <th>Total</th>\r\n                          <th>Note</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr *ngFor=\"let item of selectedOrder.userItems[userId].items\">\r\n                          <td>{{ item.menuItem?.name || 'Unknown Item' }}</td>\r\n                          <td>${{ item.menuItem?.price?.toFixed(2) || '0.00' }}</td>\r\n                          <td>{{ item.quantity }}</td>\r\n                          <td>${{ ((item.menuItem?.price || 0) * item.quantity).toFixed(2) }}</td>\r\n                          <td>{{ item.note || '-' }}</td>\r\n                        </tr>\r\n                        <!-- Delivery fee row -->\r\n                        <tr *ngIf=\"selectedOrder.userItems[userId].deliveryFee > 0\" class=\"delivery-fee-row\">\r\n                          <td colspan=\"3\" class=\"text-end fw-bold\">Delivery Fee (per user):</td>\r\n                          <td>${{ selectedOrder.userItems[userId].deliveryFee.toFixed(2) }}</td>\r\n                          <td>-</td>\r\n                        </tr>\r\n                      </tbody>\r\n                      <tfoot>\r\n                        <tr>\r\n                          <th colspan=\"3\" class=\"text-end\">Subtotal:</th>\r\n                          <th>${{ selectedOrder.userItems[userId].totalAmount.toFixed(2) }}</th>\r\n                          <th></th>\r\n                        </tr>\r\n                      </tfoot>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Order Summary -->\r\n            <div class=\"card mt-4\">\r\n              <div class=\"card-header\">\r\n                <h4 class=\"mb-0\">Order Summary</h4>\r\n              </div>\r\n              <div class=\"card-body\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6 offset-md-6\">\r\n                    <table class=\"table\">\r\n                      <tbody>\r\n                        <tr>\r\n                          <th>Items Total:</th>\r\n                          <td class=\"text-end\">${{ (selectedOrder.totalAmount! - (selectedOrder.deliveryFee || 0)).toFixed(2) }}</td>\r\n                        </tr>\r\n                        <tr *ngIf=\"selectedOrder.deliveryFee\">\r\n                          <th>Delivery Fee:</th>\r\n                          <td class=\"text-end\">${{ selectedOrder.deliveryFee.toFixed(2) }}</td>\r\n                        </tr>\r\n                        <tr class=\"fw-bold\">\r\n                          <th>Total Amount:</th>\r\n                          <td class=\"text-end\">${{ selectedOrder.totalAmount?.toFixed(2) }}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <ng-template #noItems>\r\n            <div class=\"alert alert-info\">\r\n              No items found for this order.\r\n            </div>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" (click)=\"clearSelectedOrder()\">Close</button>\r\n        <button *ngIf=\"selectedOrder.status === OrderStatus.Open\" \r\n                type=\"button\" \r\n                class=\"btn btn-danger\" \r\n                (click)=\"showCloseOrderConfirmation(selectedOrder)\">\r\n          Close Order\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Main Content -->\r\n  <div *ngIf=\"!isLoading\">\r\n    <!-- Active Orders Section -->\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-header bg-success text-white\">\r\n        <h2 class=\"mb-0\">Active Orders</h2>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div *ngIf=\"activeOrders.length === 0\" class=\"alert alert-info\">\r\n          No active orders found.\r\n        </div>\r\n        \r\n        <div class=\"table-responsive\" *ngIf=\"activeOrders.length > 0\">\r\n          <table class=\"table table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th>Order ID</th>\r\n                <th>Restaurant</th>\r\n                <th>Date</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let order of activeOrders\">\r\n                <td>{{ order.id }}</td>\r\n                <td>{{ order.restaurant?.name || 'N/A' }}</td>\r\n                <td>{{ formatDate(order.orderDate) }}</td>\r\n                <td>\r\n                  <div class=\"btn-group\" role=\"group\">\r\n                    <button class=\"btn btn-sm btn-primary\" (click)=\"viewOrderDetails(order)\">\r\n                      <i class=\"fas fa-eye me-1\"></i> View Details\r\n                    </button>\r\n                    <button class=\"btn btn-sm btn-danger\" (click)=\"showCloseOrderConfirmation(order)\">\r\n                      <i class=\"fas fa-times-circle me-1\"></i> Close Order\r\n                    </button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Order History Section -->\r\n    <div class=\"card\">\r\n      <div class=\"card-header bg-secondary text-white\">\r\n        <h2 class=\"mb-0\">Order History</h2>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div *ngIf=\"orderHistory.length === 0\" class=\"alert alert-info\">\r\n          No order history found.\r\n        </div>\r\n        \r\n        <div class=\"table-responsive\" *ngIf=\"orderHistory.length > 0\">\r\n          <table class=\"table table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th>Order ID</th>\r\n                <th>Restaurant</th>\r\n                <th>Date</th>\r\n                <th>Closed At</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let order of orderHistory\">\r\n                <td>{{ order.id }}</td>\r\n                <td>{{ order.restaurant?.name || 'N/A' }}</td>\r\n                <td>{{ formatDate(order.orderDate) }}</td>\r\n                <td>{{ formatDate(order.closedAt) }}</td>\r\n                <td>\r\n                  <button class=\"btn btn-sm btn-primary\" (click)=\"viewOrderDetails(order)\">\r\n                    <i class=\"fas fa-eye me-1\"></i> View Details\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"mt-4\">\r\n    <a routerLink=\"/admin\" class=\"btn btn-secondary\">\r\n      <i class=\"fas fa-arrow-left me-2\"></i>Back to Dashboard\r\n    </a>\r\n  </div>\r\n</div> "],
  "mappings": "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",
  "names": []
}
