import{$a as m,B as O,e as l,i as s,pb as d,y as h}from"./chunk-57XHIBD7.js";var p=(r=>(r[r.Open=1]="Open",r[r.Closed=2]="Closed",r))(p||{}),g=(r=>(r[r.Unpaid=1]="Unpaid",r[r.Paid=2]="Paid",r))(g||{});var v=class o{constructor(e){this.http=e;this.loadActiveOrdersFromStorage()}apiUrl=`${d.apiUrl}/orders`;activeOrdersCache={};loadActiveOrdersFromStorage(){try{let e=localStorage.getItem("activeOrders");if(e){this.activeOrdersCache=JSON.parse(e);let r=Date.now(),t=!1;Object.keys(this.activeOrdersCache).forEach(i=>{r-this.activeOrdersCache[i].timestamp>24*60*60*1e3&&(delete this.activeOrdersCache[i],t=!0)}),t&&this.saveActiveOrdersToStorage()}}catch(e){console.error("Error loading active orders from storage",e),this.activeOrdersCache={}}}saveActiveOrdersToStorage(){try{localStorage.setItem("activeOrders",JSON.stringify(this.activeOrdersCache))}catch(e){console.error("Error saving active orders to storage",e)}}storeActiveOrder(e,r){this.activeOrdersCache[e]={orderId:r,restaurantId:e,timestamp:Date.now()},this.saveActiveOrdersToStorage()}removeActiveOrder(e){this.activeOrdersCache[e]&&(delete this.activeOrdersCache[e],this.saveActiveOrdersToStorage())}getCachedActiveOrder(e){return this.activeOrdersCache[e]||null}startOrder(e,r){return this.http.post(`${this.apiUrl}/start`,{restaurantId:e,managerId:r}).pipe(s(t=>{let i=t.id||t;return this.storeActiveOrder(e,i),i}))}getById(e){return this.http.get(`${this.apiUrl}/${e}`)}getActiveOrders(){return this.http.get(`${this.apiUrl}/active`)}getActiveOrderForRestaurant(e){console.log(`Fetching active orders to check for restaurant ${e}`);let r=this.getCachedActiveOrder(e);return r&&console.log("Found cached active order:",r),this.http.get(`${this.apiUrl}/active`).pipe(s(t=>{if(console.log("All active orders response:",t),!t)return this.removeActiveOrder(e),null;let i=[];if(Array.isArray(t))i=t;else if(t.data&&Array.isArray(t.data))i=t.data;else return console.error("Unexpected response format:",t),this.removeActiveOrder(e),null;console.log("Processing orders:",i);let a=i.find(n=>{let c=n.restaurantId||(n.restaurant?n.restaurant.id:null);return console.log("Comparing order restaurant ID:",c,"with",e),c===e});return a&&a.id?(console.log("Found matching order:",a),this.storeActiveOrder(e,a.id),a):(this.removeActiveOrder(e),null)}))}hasActiveOrderForRestaurant(e){return this.getCachedActiveOrder(e)?l(!0):this.getActiveOrderForRestaurant(e).pipe(s(t=>!!t&&t.status===1))}getOrderHistory(e,r){let t=`${this.apiUrl}/history`;return(e||r)&&(t+="?",e&&(t+=`userId=${e}`),r&&(t+=e?`&restaurantId=${r}`:`restaurantId=${r}`)),this.http.get(t)}getMyOrderHistory(e){let r=`${this.apiUrl}/my-history`;return e&&(r+=`?restaurantId=${e}`),this.http.get(r)}getOrderReceipt(e){return this.http.get(`${this.apiUrl}/${e}/receipt`)}closeOrder(e){return this.http.post(`${this.apiUrl}/${e}/close`,{}).pipe(s(r=>(Object.keys(this.activeOrdersCache).forEach(t=>{this.activeOrdersCache[t].orderId===e&&this.removeActiveOrder(t)}),r)))}updatePaymentStatus(e,r,t){console.log(`Updating payment status for order ${e}, user ${r} to status ${t}`);let i=`${d.apiUrl}/orders/${e}/users/${r}/payment-status`;return console.log("Request URL:",i),this.http.put(i,{status:Number(t)})}getOrderPaymentStatuses(e){return this.http.get(`${this.apiUrl}/${e}/payment-statuses`)}getMyOrderItems(e){return this.http.get(`${this.apiUrl}/${e}/my-items`)}getAllOrderItems(e){return this.http.get(`${this.apiUrl}/${e}/items`)}addOrderItem(e){return this.http.post(`${this.apiUrl}/items`,e)}updateOrderItem(e,r){return this.http.put(`${this.apiUrl}/items/${e}`,{orderItemId:e,quantity:r.quantity,note:r.note||""})}deleteOrderItem(e){return this.http.delete(`${this.apiUrl}/items/${e}`)}canModifyOrderItem(e,r){return this.getById(r).pipe(s(t=>t.status===1))}static \u0275fac=function(r){return new(r||o)(O(m))};static \u0275prov=h({token:o,factory:o.\u0275fac,providedIn:"root"})};export{p as a,g as b,v as c};
