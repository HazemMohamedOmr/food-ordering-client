{
  "version": 3,
  "sources": ["src/app/core/models/order.model.ts", "src/app/core/services/order.service.ts"],
  "sourcesContent": ["import { Restaurant } from './restaurant.model';\r\nimport { User } from './user.model';\r\nimport { OrderItem } from './order-item.model';\r\nimport { Payment } from './payment.model';\r\n\r\nexport enum OrderStatus {\r\n  Open = 1,\r\n  Closed = 2\r\n}\r\n\r\nexport enum PaymentStatus {\r\n  Unpaid = 1,\r\n  Paid = 2\r\n}\r\n\r\nexport interface Order {\r\n  id?: string;\r\n  restaurantId: string;\r\n  restaurant?: Restaurant;\r\n  managerId: string;\r\n  manager?: User;\r\n  status: OrderStatus;\r\n  closedAt?: Date;\r\n  orderDate: Date;\r\n  orderItems?: OrderItem[];\r\n  payments?: Payment[];\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, map, of } from 'rxjs';\r\nimport { Order, OrderStatus } from '../models/order.model';\r\nimport { environment } from '../../../environments/environment';\r\nimport { OrderItem } from '../models/order-item.model';\r\nimport { PaymentStatus } from '../models/order.model';\r\n\r\ninterface StoredActiveOrder {\r\n  orderId: string;\r\n  restaurantId: string;\r\n  timestamp: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n  private apiUrl = `${environment.apiUrl}/orders`;\r\n  private activeOrdersCache: { [restaurantId: string]: StoredActiveOrder } = {};\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadActiveOrdersFromStorage();\r\n  }\r\n\r\n  private loadActiveOrdersFromStorage(): void {\r\n    try {\r\n      const stored = localStorage.getItem('activeOrders');\r\n      if (stored) {\r\n        this.activeOrdersCache = JSON.parse(stored);\r\n        \r\n        // Clean up any orders that are older than 24 hours\r\n        const now = Date.now();\r\n        let hasChanges = false;\r\n        \r\n        Object.keys(this.activeOrdersCache).forEach(restaurantId => {\r\n          if (now - this.activeOrdersCache[restaurantId].timestamp > 24 * 60 * 60 * 1000) {\r\n            delete this.activeOrdersCache[restaurantId];\r\n            hasChanges = true;\r\n          }\r\n        });\r\n        \r\n        if (hasChanges) {\r\n          this.saveActiveOrdersToStorage();\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.error('Error loading active orders from storage', e);\r\n      this.activeOrdersCache = {};\r\n    }\r\n  }\r\n\r\n  private saveActiveOrdersToStorage(): void {\r\n    try {\r\n      localStorage.setItem('activeOrders', JSON.stringify(this.activeOrdersCache));\r\n    } catch (e) {\r\n      console.error('Error saving active orders to storage', e);\r\n    }\r\n  }\r\n\r\n  storeActiveOrder(restaurantId: string, orderId: string): void {\r\n    this.activeOrdersCache[restaurantId] = {\r\n      orderId,\r\n      restaurantId,\r\n      timestamp: Date.now()\r\n    };\r\n    this.saveActiveOrdersToStorage();\r\n  }\r\n\r\n  removeActiveOrder(restaurantId: string): void {\r\n    if (this.activeOrdersCache[restaurantId]) {\r\n      delete this.activeOrdersCache[restaurantId];\r\n      this.saveActiveOrdersToStorage();\r\n    }\r\n  }\r\n\r\n  getCachedActiveOrder(restaurantId: string): StoredActiveOrder | null {\r\n    return this.activeOrdersCache[restaurantId] || null;\r\n  }\r\n\r\n  startOrder(restaurantId: string, managerId: string): Observable<string> {\r\n    return this.http.post<any>(`${this.apiUrl}/start`, {\r\n      restaurantId,\r\n      managerId\r\n    }).pipe(\r\n      map(response => {\r\n        const orderId = response.id || response;\r\n        this.storeActiveOrder(restaurantId, orderId);\r\n        return orderId;\r\n      })\r\n    );\r\n  }\r\n\r\n  getById(id: string): Observable<Order> {\r\n    return this.http.get<Order>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  getActiveOrders(): Observable<Order[]> {\r\n    return this.http.get<Order[]>(`${this.apiUrl}/active`);\r\n  }\r\n\r\n  getActiveOrderForRestaurant(restaurantId: string): Observable<Order | null> {\r\n    console.log(`Fetching active orders to check for restaurant ${restaurantId}`);\r\n    \r\n    // First check the cache\r\n    const cachedOrder = this.getCachedActiveOrder(restaurantId);\r\n    if (cachedOrder) {\r\n      console.log('Found cached active order:', cachedOrder);\r\n    }\r\n    \r\n    // Get all active orders and filter for this restaurant\r\n    return this.http.get<any>(`${this.apiUrl}/active`).pipe(\r\n      map(response => {\r\n        console.log('All active orders response:', response);\r\n        \r\n        // Handle null or empty response\r\n        if (!response) {\r\n          this.removeActiveOrder(restaurantId);\r\n          return null;\r\n        }\r\n        \r\n        // Handle different response formats\r\n        let orders: any[] = [];\r\n        \r\n        if (Array.isArray(response)) {\r\n          // Direct array response\r\n          orders = response;\r\n        } else if (response.data && Array.isArray(response.data)) {\r\n          // Wrapped array response\r\n          orders = response.data;\r\n        } else {\r\n          console.error('Unexpected response format:', response);\r\n          this.removeActiveOrder(restaurantId);\r\n          return null;\r\n        }\r\n        \r\n        console.log('Processing orders:', orders);\r\n        \r\n        // Find an order for this restaurant\r\n        const matchingOrder = orders.find(order => {\r\n          const orderRestaurantId = order.restaurantId || \r\n                                   (order.restaurant ? order.restaurant.id : null);\r\n          \r\n          console.log('Comparing order restaurant ID:', orderRestaurantId, 'with', restaurantId);\r\n          return orderRestaurantId === restaurantId;\r\n        });\r\n        \r\n        if (matchingOrder && matchingOrder.id) {\r\n          console.log('Found matching order:', matchingOrder);\r\n          // Store in cache\r\n          this.storeActiveOrder(restaurantId, matchingOrder.id);\r\n          return matchingOrder;\r\n        } else {\r\n          // No matching order found\r\n          this.removeActiveOrder(restaurantId);\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  hasActiveOrderForRestaurant(restaurantId: string): Observable<boolean> {\r\n    // First check the cache\r\n    const cachedOrder = this.getCachedActiveOrder(restaurantId);\r\n    if (cachedOrder) {\r\n      return of(true);\r\n    }\r\n    \r\n    // If not in cache, check the API\r\n    return this.getActiveOrderForRestaurant(restaurantId).pipe(\r\n      map(order => !!order && order.status === OrderStatus.Open)\r\n    );\r\n  }\r\n\r\n  getOrderHistory(userId?: string, restaurantId?: string): Observable<Order[]> {\r\n    let url = `${this.apiUrl}/history`;\r\n    \r\n    if (userId || restaurantId) {\r\n      url += '?';\r\n      if (userId) {\r\n        url += `userId=${userId}`;\r\n      }\r\n      if (restaurantId) {\r\n        url += userId ? `&restaurantId=${restaurantId}` : `restaurantId=${restaurantId}`;\r\n      }\r\n    }\r\n    \r\n    return this.http.get<Order[]>(url);\r\n  }\r\n\r\n  getMyOrderHistory(restaurantId?: string): Observable<Order[]> {\r\n    let url = `${this.apiUrl}/my-history`;\r\n    if (restaurantId) {\r\n      url += `?restaurantId=${restaurantId}`;\r\n    }\r\n    return this.http.get<Order[]>(url);\r\n  }\r\n\r\n  getOrderReceipt(orderId: string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/${orderId}/receipt`);\r\n  }\r\n\r\n  closeOrder(orderId: string): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/${orderId}/close`, {}).pipe(\r\n      map(response => {\r\n        // Find and remove this order from the cache\r\n        Object.keys(this.activeOrdersCache).forEach(restaurantId => {\r\n          if (this.activeOrdersCache[restaurantId].orderId === orderId) {\r\n            this.removeActiveOrder(restaurantId);\r\n          }\r\n        });\r\n        return response;\r\n      })\r\n    );\r\n  }\r\n\r\n  updatePaymentStatus(orderId: string, userId: string, status: PaymentStatus): Observable<any> {\r\n    return this.http.put<any>(\r\n      `${this.apiUrl}/${orderId}/users/${userId}/payment-status`,\r\n      { status }\r\n    );\r\n  }\r\n\r\n  // Order Item Methods\r\n  getMyOrderItems(orderId: string): Observable<OrderItem[]> {\r\n    return this.http.get<OrderItem[]>(`${this.apiUrl}/${orderId}/my-items`);\r\n  }\r\n\r\n  getAllOrderItems(orderId: string): Observable<OrderItem[]> {\r\n    return this.http.get<OrderItem[]>(`${this.apiUrl}/${orderId}/items`);\r\n  }\r\n\r\n  addOrderItem(orderItem: OrderItem): Observable<OrderItem> {\r\n    return this.http.post<OrderItem>(`${this.apiUrl}/items`, orderItem);\r\n  }\r\n\r\n  updateOrderItem(id: string, orderItem: OrderItem): Observable<OrderItem> {\r\n    return this.http.put<OrderItem>(`${this.apiUrl}/items/${id}`, orderItem);\r\n  }\r\n\r\n  deleteOrderItem(id: string): Observable<any> {\r\n    return this.http.delete<any>(`${this.apiUrl}/items/${id}`);\r\n  }\r\n\r\n  canModifyOrderItem(orderItem: OrderItem, orderId: string): Observable<boolean> {\r\n    return this.getById(orderId).pipe(\r\n      map(order => order.status === OrderStatus.Open)\r\n    );\r\n  }\r\n} "],
  "mappings": "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",
  "names": ["OrderStatus", "PaymentStatus"]
}
