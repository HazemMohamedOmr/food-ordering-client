{
  "version": 3,
  "sources": ["src/app/core/services/cart.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of, catchError, map, tap } from 'rxjs';\r\nimport { MenuItem } from '../models/menu-item.model';\r\nimport { OrderItem } from '../models/order-item.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface CartItem {\r\n  menuItem: MenuItem;\r\n  quantity: number;\r\n  note?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private cartItems: CartItem[] = [];\r\n  private cartSubject = new BehaviorSubject<CartItem[]>([]);\r\n  private restaurantIdSubject = new BehaviorSubject<string | null>(null);\r\n  private activeOrderIdSubject = new BehaviorSubject<string | null>(null);\r\n  private apiUrl = `${environment.apiUrl}/orders`;\r\n  \r\n  constructor(private http: HttpClient) { \r\n    // Load cart from localStorage if available\r\n    this.loadCart();\r\n  }\r\n\r\n  get items$(): Observable<CartItem[]> {\r\n    return this.cartSubject.asObservable();\r\n  }\r\n\r\n  get restaurantId$(): Observable<string | null> {\r\n    return this.restaurantIdSubject.asObservable();\r\n  }\r\n\r\n  get activeOrderId$(): Observable<string | null> {\r\n    return this.activeOrderIdSubject.asObservable();\r\n  }\r\n\r\n  get currentRestaurantId(): string | null {\r\n    return this.restaurantIdSubject.value;\r\n  }\r\n\r\n  get currentActiveOrderId(): string | null {\r\n    return this.activeOrderIdSubject.value;\r\n  }\r\n\r\n  get totalItems(): number {\r\n    return this.cartItems.reduce((total, item) => total + item.quantity, 0);\r\n  }\r\n\r\n  get totalPrice(): number {\r\n    return this.cartItems.reduce((total, item) => \r\n      total + (item.menuItem.price * item.quantity), 0);\r\n  }\r\n\r\n  private loadCart(): void {\r\n    const savedCart = localStorage.getItem('cart');\r\n    const savedRestaurantId = localStorage.getItem('restaurantId');\r\n    const savedActiveOrderId = localStorage.getItem('activeOrderId');\r\n    \r\n    if (savedCart) {\r\n      this.cartItems = JSON.parse(savedCart);\r\n      this.cartSubject.next([...this.cartItems]);\r\n    }\r\n    \r\n    if (savedRestaurantId) {\r\n      this.restaurantIdSubject.next(savedRestaurantId);\r\n    }\r\n    \r\n    if (savedActiveOrderId) {\r\n      this.activeOrderIdSubject.next(savedActiveOrderId);\r\n    }\r\n  }\r\n\r\n  private saveCart(): void {\r\n    localStorage.setItem('cart', JSON.stringify(this.cartItems));\r\n    if (this.currentRestaurantId) {\r\n      localStorage.setItem('restaurantId', this.currentRestaurantId);\r\n    }\r\n    if (this.currentActiveOrderId) {\r\n      localStorage.setItem('activeOrderId', this.currentActiveOrderId);\r\n    }\r\n    this.cartSubject.next([...this.cartItems]);\r\n  }\r\n\r\n  checkActiveOrder(restaurantId: string): Observable<boolean> {\r\n    return this.http.get<any>(`${this.apiUrl}/active/restaurant/${restaurantId}`).pipe(\r\n      map(response => {\r\n        if (response && response.id) {\r\n          this.activeOrderIdSubject.next(response.id);\r\n          localStorage.setItem('activeOrderId', response.id);\r\n          return true;\r\n        }\r\n        return false;\r\n      }),\r\n      catchError(() => {\r\n        this.activeOrderIdSubject.next(null);\r\n        localStorage.removeItem('activeOrderId');\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n\r\n  setRestaurant(restaurantId: string): Observable<boolean> {\r\n    // First check if there's an active order for this restaurant\r\n    return this.checkActiveOrder(restaurantId).pipe(\r\n      tap(hasActiveOrder => {\r\n        if (hasActiveOrder) {\r\n          if (this.currentRestaurantId !== null && this.currentRestaurantId !== restaurantId && this.cartItems.length > 0) {\r\n            if (confirm('Adding items from a different restaurant will clear your current cart. Continue?')) {\r\n              this.clearCart();\r\n            } else {\r\n              return;\r\n            }\r\n          }\r\n          this.restaurantIdSubject.next(restaurantId);\r\n          localStorage.setItem('restaurantId', restaurantId);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  addToCart(menuItem: MenuItem, quantity: number = 1, note?: string): boolean {\r\n    // Check if there's an active order for this restaurant\r\n    if (!this.currentActiveOrderId) {\r\n      alert('There is no active order for this restaurant. Please wait for the manager to start an order.');\r\n      return false;\r\n    }\r\n    \r\n    const existingItemIndex = this.cartItems.findIndex(item => item.menuItem.id === menuItem.id);\r\n    \r\n    if (existingItemIndex !== -1) {\r\n      this.cartItems[existingItemIndex].quantity += quantity;\r\n      if (note) {\r\n        this.cartItems[existingItemIndex].note = note;\r\n      }\r\n    } else {\r\n      this.cartItems.push({ menuItem, quantity, note });\r\n    }\r\n    \r\n    this.saveCart();\r\n    return true;\r\n  }\r\n\r\n  updateQuantity(menuItemId: string, quantity: number): void {\r\n    const index = this.cartItems.findIndex(item => item.menuItem.id === menuItemId);\r\n    \r\n    if (index !== -1) {\r\n      if (quantity <= 0) {\r\n        this.removeItem(menuItemId);\r\n      } else {\r\n        this.cartItems[index].quantity = quantity;\r\n        this.saveCart();\r\n      }\r\n    }\r\n  }\r\n\r\n  updateNote(menuItemId: string, note: string): void {\r\n    const index = this.cartItems.findIndex(item => item.menuItem.id === menuItemId);\r\n    \r\n    if (index !== -1) {\r\n      this.cartItems[index].note = note;\r\n      this.saveCart();\r\n    }\r\n  }\r\n\r\n  removeItem(menuItemId: string): void {\r\n    this.cartItems = this.cartItems.filter(item => item.menuItem.id !== menuItemId);\r\n    this.saveCart();\r\n  }\r\n\r\n  clearCart(): void {\r\n    this.cartItems = [];\r\n    this.restaurantIdSubject.next(null);\r\n    this.activeOrderIdSubject.next(null);\r\n    localStorage.removeItem('cart');\r\n    localStorage.removeItem('restaurantId');\r\n    localStorage.removeItem('activeOrderId');\r\n    this.cartSubject.next([]);\r\n  }\r\n\r\n  toOrderItems(orderId: string): OrderItem[] {\r\n    return this.cartItems.map(item => ({\r\n      menuItemId: item.menuItem.id || '',\r\n      quantity: item.quantity,\r\n      note: item.note || '',\r\n      menuItem: item.menuItem,\r\n      id: '',\r\n      orderId: orderId,\r\n      userId: ''\r\n    }));\r\n  }\r\n} "],
  "mappings": "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",
  "names": []
}
