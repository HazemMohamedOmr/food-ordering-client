{
  "version": 3,
  "sources": ["src/app/core/services/restaurant.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, shareReplay, tap, catchError, map, timer, timeout, throwError } from 'rxjs';\r\nimport { Restaurant } from '../models/restaurant.model';\r\nimport { environment } from '../../../environments/environment';\r\nimport { ApiResponse } from '../models/api-response.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RestaurantService {\r\n  private apiUrl = `${environment.apiUrl}/restaurants`;\r\n  \r\n  // Cache for restaurants\r\n  private restaurantsCache: Restaurant[] | null = null;\r\n  private restaurantCache: Map<string, Restaurant> = new Map<string, Restaurant>();\r\n  \r\n  // Track last cache update time\r\n  private lastCacheTime = 0;\r\n  private readonly CACHE_DURATION = 60000; // 1 minute cache duration\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll(): Observable<Restaurant[]> {\r\n    // Check if we have recent cache (less than 1 minute old)\r\n    const now = Date.now();\r\n    if (this.restaurantsCache && (now - this.lastCacheTime < this.CACHE_DURATION)) {\r\n      console.log('Using cached restaurants data');\r\n      return of(this.restaurantsCache);\r\n    }\r\n    \r\n    // Add timeout to prevent hanging on slow API\r\n    return this.http.get<Restaurant[]>(this.apiUrl).pipe(\r\n      timeout(10000), // 10 second timeout\r\n      map(restaurants => {\r\n        // Pre-process data if needed\r\n        return restaurants.map(r => ({\r\n          ...r,\r\n          description: r.description || 'A delightful restaurant serving wonderful dishes.'\r\n        }));\r\n      }),\r\n      tap(restaurants => {\r\n        console.log('Updating restaurant cache with', restaurants.length, 'restaurants');\r\n        this.restaurantsCache = restaurants;\r\n        this.lastCacheTime = now;\r\n        \r\n        // Also store individual restaurants in cache\r\n        restaurants.forEach(restaurant => {\r\n          if (restaurant.id) {\r\n            this.restaurantCache.set(restaurant.id, restaurant);\r\n          }\r\n        });\r\n      }),\r\n      shareReplay(1),\r\n      catchError(error => {\r\n        console.error('Error fetching restaurants:', error);\r\n        \r\n        // If we have old cache, return it as fallback\r\n        if (this.restaurantsCache) {\r\n          console.log('Returning expired cache data as fallback');\r\n          return of(this.restaurantsCache);\r\n        }\r\n        \r\n        // If first load fails and we have no cache, return empty array\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  getById(id: string): Observable<Restaurant> {\r\n    // Return cached data if available\r\n    if (this.restaurantCache.has(id)) {\r\n      console.log('Using cached restaurant data for id:', id);\r\n      return of(this.restaurantCache.get(id)!);\r\n    }\r\n    \r\n    return this.http.get<Restaurant>(`${this.apiUrl}/${id}`).pipe(\r\n      timeout(5000), // 5 second timeout\r\n      tap(restaurant => {\r\n        if (restaurant && restaurant.id) {\r\n          this.restaurantCache.set(id, restaurant);\r\n        }\r\n      }),\r\n      shareReplay(1),\r\n      catchError(error => {\r\n        console.error(`Error fetching restaurant with id ${id}:`, error);\r\n        \r\n        // If we have this restaurant in the all-restaurants cache, use that\r\n        if (this.restaurantsCache) {\r\n          const cachedRestaurant = this.restaurantsCache.find(r => r.id === id);\r\n          if (cachedRestaurant) {\r\n            console.log('Using restaurant from all-restaurants cache as fallback');\r\n            return of(cachedRestaurant);\r\n          }\r\n        }\r\n        \r\n        return throwError(() => new Error(`Failed to load restaurant details: ${error.message || 'Network error'}`));\r\n      })\r\n    );\r\n  }\r\n\r\n  create(restaurant: Restaurant): Observable<string> {\r\n    return this.http.post<any>(this.apiUrl, restaurant).pipe(\r\n      map(response => response.data),\r\n      tap(() => {\r\n        // Update caches\r\n        this.clearCache();\r\n      })\r\n    );\r\n  }\r\n\r\n  update(id: string, restaurant: Restaurant): Observable<any> {\r\n    return this.http.put<any>(`${this.apiUrl}/${id}`, restaurant).pipe(\r\n      tap(() => {\r\n        // Update caches\r\n        this.clearCache();\r\n      })\r\n    );\r\n  }\r\n  \r\n  delete(id: string): Observable<any> {\r\n    return this.http.delete<any>(`${this.apiUrl}/${id}`).pipe(\r\n      tap(() => {\r\n        // Update caches\r\n        this.clearCache();\r\n      })\r\n    );\r\n  }\r\n  \r\n  // Clear caches when data is modified\r\n  clearCache(): void {\r\n    console.log('Clearing restaurant cache');\r\n    this.restaurantsCache = null;\r\n    this.restaurantCache.clear();\r\n    this.lastCacheTime = 0;\r\n  }\r\n  \r\n  // For debugging\r\n  getCacheStatus(): {restaurantsCached: number, individualCached: number, age: number} {\r\n    return {\r\n      restaurantsCached: this.restaurantsCache ? this.restaurantsCache.length : 0,\r\n      individualCached: this.restaurantCache.size,\r\n      age: this.lastCacheTime ? Date.now() - this.lastCacheTime : 0\r\n    };\r\n  }\r\n} "],
  "mappings": "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",
  "names": []
}
