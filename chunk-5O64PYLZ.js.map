{
  "version": 3,
  "sources": ["src/app/core/services/admin.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User, UserRole } from '../models/user.model';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n  private apiUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // User Management\r\n  getAllUsers(): Observable<User[]> {\r\n    return this.http.get<User[]>(`${this.apiUrl}/admin/users`);\r\n  }\r\n\r\n  updateUserRole(userId: string, role: UserRole): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/admin/users/${userId}/role`, { role });\r\n  }\r\n\r\n  // Restaurant Management methods are already in RestaurantService\r\n\r\n  // Order Management\r\n  closeOrder(orderId: string): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/orders/${orderId}/close`, {});\r\n  }\r\n\r\n  updatePaymentStatus(orderId: string, userId: string, status: number): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/orders/${orderId}/users/${userId}/payment-status`, { status });\r\n  }\r\n\r\n  getActiveOrders(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/orders/active`);\r\n  }\r\n\r\n  getOrderHistory(userId?: string, restaurantId?: string, includeOtherParticipants: boolean = false): Observable<any[]> {\r\n    let url = `${this.apiUrl}/orders/history?`;\r\n    \r\n    if (userId) {\r\n      url += `userId=${userId}&`;\r\n    }\r\n    \r\n    if (restaurantId) {\r\n      url += `restaurantId=${restaurantId}&`;\r\n    }\r\n    \r\n    url += `includeOtherParticipants=${includeOtherParticipants}`;\r\n    \r\n    return this.http.get<any[]>(url);\r\n  }\r\n} "],
  "mappings": ";;;;;;;;;;AASM,IAAO,eAAP,MAAO,cAAY;EAGH;EAFZ,SAAS,YAAY;EAE7B,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAoB;;EAGxC,cAAW;AACT,WAAO,KAAK,KAAK,IAAY,GAAG,KAAK,MAAM,cAAc;EAC3D;EAEA,eAAe,QAAgB,MAAc;AAC3C,WAAO,KAAK,KAAK,IAAI,GAAG,KAAK,MAAM,gBAAgB,MAAM,SAAS,EAAE,KAAI,CAAE;EAC5E;;;EAKA,WAAW,SAAe;AACxB,WAAO,KAAK,KAAK,KAAK,GAAG,KAAK,MAAM,WAAW,OAAO,UAAU,CAAA,CAAE;EACpE;EAEA,oBAAoB,SAAiB,QAAgB,QAAc;AACjE,WAAO,KAAK,KAAK,IAAI,GAAG,KAAK,MAAM,WAAW,OAAO,UAAU,MAAM,mBAAmB,EAAE,OAAM,CAAE;EACpG;EAEA,kBAAe;AACb,WAAO,KAAK,KAAK,IAAW,GAAG,KAAK,MAAM,gBAAgB;EAC5D;EAEA,gBAAgB,QAAiB,cAAuB,2BAAoC,OAAK;AAC/F,QAAI,MAAM,GAAG,KAAK,MAAM;AAExB,QAAI,QAAQ;AACV,aAAO,UAAU,MAAM;IACzB;AAEA,QAAI,cAAc;AAChB,aAAO,gBAAgB,YAAY;IACrC;AAEA,WAAO,4BAA4B,wBAAwB;AAE3D,WAAO,KAAK,KAAK,IAAW,GAAG;EACjC;;qCA3CW,eAAY,mBAAA,UAAA,CAAA;EAAA;4EAAZ,eAAY,SAAZ,cAAY,WAAA,YAFX,OAAM,CAAA;;;sEAEP,cAAY,CAAA;UAHxB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
